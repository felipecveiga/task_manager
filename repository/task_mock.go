// Code generated by MockGen. DO NOT EDIT.
// Source: ./task.go
//
// Generated by this command:
//
//	mockgen -source=./task.go -destination=./task_mock.go -package=repository
//

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"

	model "github.com/felipecveiga/task_manager/model"
	gomock "go.uber.org/mock/gomock"
)

// MockTaskRepository is a mock of TaskRepository interface.
type MockTaskRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTaskRepositoryMockRecorder
	isgomock struct{}
}

// MockTaskRepositoryMockRecorder is the mock recorder for MockTaskRepository.
type MockTaskRepositoryMockRecorder struct {
	mock *MockTaskRepository
}

// NewMockTaskRepository creates a new mock instance.
func NewMockTaskRepository(ctrl *gomock.Controller) *MockTaskRepository {
	mock := &MockTaskRepository{ctrl: ctrl}
	mock.recorder = &MockTaskRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskRepository) EXPECT() *MockTaskRepositoryMockRecorder {
	return m.recorder
}

// CreateTaskFromDB mocks base method.
func (m *MockTaskRepository) CreateTaskFromDB(userID int, task *model.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTaskFromDB", userID, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTaskFromDB indicates an expected call of CreateTaskFromDB.
func (mr *MockTaskRepositoryMockRecorder) CreateTaskFromDB(userID, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTaskFromDB", reflect.TypeOf((*MockTaskRepository)(nil).CreateTaskFromDB), userID, task)
}

// DeleteTaskFromDB mocks base method.
func (m *MockTaskRepository) DeleteTaskFromDB(userID, taskID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTaskFromDB", userID, taskID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTaskFromDB indicates an expected call of DeleteTaskFromDB.
func (mr *MockTaskRepositoryMockRecorder) DeleteTaskFromDB(userID, taskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTaskFromDB", reflect.TypeOf((*MockTaskRepository)(nil).DeleteTaskFromDB), userID, taskID)
}

// GetTasksFromDB mocks base method.
func (m *MockTaskRepository) GetTasksFromDB(userID int) ([]model.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTasksFromDB", userID)
	ret0, _ := ret[0].([]model.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTasksFromDB indicates an expected call of GetTasksFromDB.
func (mr *MockTaskRepositoryMockRecorder) GetTasksFromDB(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTasksFromDB", reflect.TypeOf((*MockTaskRepository)(nil).GetTasksFromDB), userID)
}

// UpdateTaskInDB mocks base method.
func (m *MockTaskRepository) UpdateTaskInDB(userID, taskID int, updatedTask *model.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTaskInDB", userID, taskID, updatedTask)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTaskInDB indicates an expected call of UpdateTaskInDB.
func (mr *MockTaskRepositoryMockRecorder) UpdateTaskInDB(userID, taskID, updatedTask any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTaskInDB", reflect.TypeOf((*MockTaskRepository)(nil).UpdateTaskInDB), userID, taskID, updatedTask)
}
