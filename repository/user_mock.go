// Code generated by MockGen. DO NOT EDIT.
// Source: ./user.go
//
// Generated by this command:
//
//	mockgen -source=./user.go -destination=./user_mock.go -package=repository
//

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"

	model "github.com/felipecveiga/task_manager/model"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateUserFromDB mocks base method.
func (m *MockRepository) CreateUserFromDB(vote *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserFromDB", vote)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserFromDB indicates an expected call of CreateUserFromDB.
func (mr *MockRepositoryMockRecorder) CreateUserFromDB(vote any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserFromDB", reflect.TypeOf((*MockRepository)(nil).CreateUserFromDB), vote)
}

// ExistsUserByEmail mocks base method.
func (m *MockRepository) ExistsUserByEmail(email string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsUserByEmail", email)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistsUserByEmail indicates an expected call of ExistsUserByEmail.
func (mr *MockRepositoryMockRecorder) ExistsUserByEmail(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsUserByEmail", reflect.TypeOf((*MockRepository)(nil).ExistsUserByEmail), email)
}
